{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/타입단언/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Sijin.blog"}},"markdownRemark":{"id":"d3e4f1e7-36a9-577b-ac33-5f3575244c89","excerpt":"타입단언 React의 useState hook은 value와 setValue함수를 담은 배열을 반환하는데 일반적으로 배열 구조 분해 문법을 통해 값을 전달받아 활용한다. typescript에서 useState처럼 type이 다른 두가지 요소를 담은 배열을 반환하는 custom hook…","html":"<h3 id=\"타입단언\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EB%8B%A8%EC%96%B8\" aria-label=\"타입단언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입단언</h3>\n<p>React의 useState hook은 value와 setValue함수를 담은 배열을 반환하는데 일반적으로 <a href=\"https://ko.reactjs.org/docs/hooks-state.html#tip-what-do-square-brackets-mean\">배열 구조 분해 문법</a>을 통해 값을 전달받아 활용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>typescript에서 useState처럼 type이 다른 두가지 요소를 담은 배열을 반환하는 custom hook을 만들때, 아래와 같은 코드는 type error가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useMyHook</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initialValue<span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">countHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> countHandler<span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> countHandler<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMyHook</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>countHandler<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">click</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> // error!\r\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 typescript 컴파일러는 useMyHook 함수가 반환하는 배열의 타입을 number타입과 () => void 타입이 모두 들어갈 수 있는 유니언 타입으로 추론한다. 따라서 App 컴포넌트의 count와 countHandler가 원래 의도했던 것 처럼 각각 number와 () => void 타입으로 선언되지 않고 count와 countHandler 모두 number | () => void인 유니언 타입으로 선언된다. 때문에 컴파일러는 button 태그의 onClick 콜백함수로 number type이 들어올 수 있다고 판단하고 오류를 발생시키게 된다.</p>\n<p>이렇듯 typescript 컴파일러가 개발자의 의도와 달리 타입을 추론한 경우 타입추론을 통해 변수의 타입을 정정해 사용해야 한다.</p>\n<h3 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useMyHook</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>initialValue<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">countHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> countHandler<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> countHandler<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMyHook</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [number, () => void]</span>\r\n<span class=\"token function\">countHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ok</span></code></pre></div>\n<p>아까같은 문제를 해결하는 여러 방법 중 하나는 as 키워드로 타입을 정해주는 것이다. 위 코드처럼 useMyHook함수가 반환하는 배열을 number와 () => void를 가진 튜플로 정의하게 되면 countHandler의 타입이 () => void로 정해져 오류없이 함수 호출이 가능하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useMyHook</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>initialValue<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">countHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> countHandler<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> countHandler<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMyHook</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// readonly [number, () => void]</span>\r\n<span class=\"token function\">countHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ok</span></code></pre></div>\n<p>혹은 <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions\">const assertion</a>을 통해 해결할 수 있다. useMyHook함수가 반환하는 배열에 as const 키워드를 사용하면 useMyHook함수의 반환값의 타입이 readonly속성이 매핑된 튜플로 적용된다. 따라서 앞선 경우와 같이 countHandler의 타입이 () => void로 정해져 오류없이 함수 호출이 가능하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> useMyHook <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>initialValue<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">countHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> countHandler<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> countHandler<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMyHook</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [number, () => void]</span>\r\n<span class=\"token function\">countHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ok</span></code></pre></div>\n<p>as 키워드를 사용한 타입단언 외에도 함수를 정의하면서 리턴타입을 [number, () => void] 튜플로 정의해주면 countHandler의 타입이 () => void으로 정해져 함수 호출이 가능하다.</p>","tableOfContents":"<ul>\n<li><a href=\"#%ED%83%80%EC%9E%85%EB%8B%A8%EC%96%B8\">타입단언</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C\">예시</a></li>\n</ul>","frontmatter":{"title":"타입단언(Type assertions)","date":"February 10, 2022","description":null,"categories":["TS","React"]}},"previous":{"fields":{"slug":"/React Hooks Quiz/"},"frontmatter":{"title":"React Hooks Quiz"}},"next":{"fields":{"slug":"/크루스칼 알고리즘/"},"frontmatter":{"title":"크루스칼 알고리즘"}}},"pageContext":{"id":"d3e4f1e7-36a9-577b-ac33-5f3575244c89","previousPostId":"3eeb0d9c-d74a-5399-ab38-cbe5930e17c2","nextPostId":"bb647370-371e-5e9f-ae0d-78c8cebfcf42"}},
    "staticQueryHashes": ["3000541721","3646010053"]}